// Generated by gencpp from file acg_control_msg/FollowWorkspaceTrajectoryFeedback.msg
// DO NOT EDIT!


#ifndef ACG_CONTROL_MSG_MESSAGE_FOLLOWWORKSPACETRAJECTORYFEEDBACK_H
#define ACG_CONTROL_MSG_MESSAGE_FOLLOWWORKSPACETRAJECTORYFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Wrench.h>
#include <std_msgs/Duration.h>

namespace acg_control_msg
{
template <class ContainerAllocator>
struct FollowWorkspaceTrajectoryFeedback_
{
  typedef FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> Type;

  FollowWorkspaceTrajectoryFeedback_()
    : desired_pose()
    , desired_wrench()
    , actual_pose()
    , actual_wrench()
    , error_pose()
    , error_wrench()
    , time_from_start()  {
    }
  FollowWorkspaceTrajectoryFeedback_(const ContainerAllocator& _alloc)
    : desired_pose(_alloc)
    , desired_wrench(_alloc)
    , actual_pose(_alloc)
    , actual_wrench(_alloc)
    , error_pose(_alloc)
    , error_wrench(_alloc)
    , time_from_start(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _desired_pose_type;
  _desired_pose_type desired_pose;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _desired_wrench_type;
  _desired_wrench_type desired_wrench;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _actual_pose_type;
  _actual_pose_type actual_pose;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _actual_wrench_type;
  _actual_wrench_type actual_wrench;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _error_pose_type;
  _error_pose_type error_pose;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _error_wrench_type;
  _error_wrench_type error_wrench;

   typedef  ::std_msgs::Duration_<ContainerAllocator>  _time_from_start_type;
  _time_from_start_type time_from_start;





  typedef boost::shared_ptr< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct FollowWorkspaceTrajectoryFeedback_

typedef ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<std::allocator<void> > FollowWorkspaceTrajectoryFeedback;

typedef boost::shared_ptr< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback > FollowWorkspaceTrajectoryFeedbackPtr;
typedef boost::shared_ptr< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback const> FollowWorkspaceTrajectoryFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.desired_pose == rhs.desired_pose &&
    lhs.desired_wrench == rhs.desired_wrench &&
    lhs.actual_pose == rhs.actual_pose &&
    lhs.actual_wrench == rhs.actual_wrench &&
    lhs.error_pose == rhs.error_pose &&
    lhs.error_wrench == rhs.error_wrench &&
    lhs.time_from_start == rhs.time_from_start;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acg_control_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ced1f6e4a7e2d4e812288f7a9f1b6e62";
  }

  static const char* value(const ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xced1f6e4a7e2d4e8ULL;
  static const uint64_t static_value2 = 0x12288f7a9f1b6e62ULL;
};

template<class ContainerAllocator>
struct DataType< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acg_control_msg/FollowWorkspaceTrajectoryFeedback";
  }

  static const char* value(const ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"geometry_msgs/Pose desired_pose\n"
"geometry_msgs/Wrench desired_wrench\n"
"geometry_msgs/Pose actual_pose\n"
"geometry_msgs/Wrench actual_wrench\n"
"geometry_msgs/Pose error_pose\n"
"geometry_msgs/Wrench error_wrench\n"
"std_msgs/Duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/Duration\n"
"duration data\n"
;
  }

  static const char* value(const ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desired_pose);
      stream.next(m.desired_wrench);
      stream.next(m.actual_pose);
      stream.next(m.actual_wrench);
      stream.next(m.error_pose);
      stream.next(m.error_wrench);
      stream.next(m.time_from_start);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowWorkspaceTrajectoryFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acg_control_msg::FollowWorkspaceTrajectoryFeedback_<ContainerAllocator>& v)
  {
    s << indent << "desired_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.desired_pose);
    s << indent << "desired_wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.desired_wrench);
    s << indent << "actual_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.actual_pose);
    s << indent << "actual_wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.actual_wrench);
    s << indent << "error_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.error_pose);
    s << indent << "error_wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.error_wrench);
    s << indent << "time_from_start: ";
    s << std::endl;
    Printer< ::std_msgs::Duration_<ContainerAllocator> >::stream(s, indent + "  ", v.time_from_start);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACG_CONTROL_MSG_MESSAGE_FOLLOWWORKSPACETRAJECTORYFEEDBACK_H
