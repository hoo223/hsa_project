// Generated by gencpp from file acg_control_msg/FollowWorkspaceTrajectoryGoal.msg
// DO NOT EDIT!


#ifndef ACG_CONTROL_MSG_MESSAGE_FOLLOWWORKSPACETRAJECTORYGOAL_H
#define ACG_CONTROL_MSG_MESSAGE_FOLLOWWORKSPACETRAJECTORYGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <workspace_trajectory_msgs/WorkspaceTrajectory.h>

namespace acg_control_msg
{
template <class ContainerAllocator>
struct FollowWorkspaceTrajectoryGoal_
{
  typedef FollowWorkspaceTrajectoryGoal_<ContainerAllocator> Type;

  FollowWorkspaceTrajectoryGoal_()
    : workspace_trajectory()  {
    }
  FollowWorkspaceTrajectoryGoal_(const ContainerAllocator& _alloc)
    : workspace_trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef  ::workspace_trajectory_msgs::WorkspaceTrajectory_<ContainerAllocator>  _workspace_trajectory_type;
  _workspace_trajectory_type workspace_trajectory;





  typedef boost::shared_ptr< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FollowWorkspaceTrajectoryGoal_

typedef ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<std::allocator<void> > FollowWorkspaceTrajectoryGoal;

typedef boost::shared_ptr< ::acg_control_msg::FollowWorkspaceTrajectoryGoal > FollowWorkspaceTrajectoryGoalPtr;
typedef boost::shared_ptr< ::acg_control_msg::FollowWorkspaceTrajectoryGoal const> FollowWorkspaceTrajectoryGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator1> & lhs, const ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator2> & rhs)
{
  return lhs.workspace_trajectory == rhs.workspace_trajectory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator1> & lhs, const ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acg_control_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53f9d0acedeba6e6691b2971b0a93f25";
  }

  static const char* value(const ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53f9d0acedeba6e6ULL;
  static const uint64_t static_value2 = 0x691b2971b0a93f25ULL;
};

template<class ContainerAllocator>
struct DataType< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acg_control_msg/FollowWorkspaceTrajectoryGoal";
  }

  static const char* value(const ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"workspace_trajectory_msgs/WorkspaceTrajectory workspace_trajectory\n"
"\n"
"================================================================================\n"
"MSG: workspace_trajectory_msgs/WorkspaceTrajectory\n"
"string name\n"
"geometry_msgs/Pose[] waypoints\n"
"geometry_msgs/Wrench[] wrenches\n"
"float64[] timestamps\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.workspace_trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowWorkspaceTrajectoryGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acg_control_msg::FollowWorkspaceTrajectoryGoal_<ContainerAllocator>& v)
  {
    s << indent << "workspace_trajectory: ";
    s << std::endl;
    Printer< ::workspace_trajectory_msgs::WorkspaceTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.workspace_trajectory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACG_CONTROL_MSG_MESSAGE_FOLLOWWORKSPACETRAJECTORYGOAL_H
