# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acg_control_msg/FollowWorkspaceTrajectoryFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import std_msgs.msg

class FollowWorkspaceTrajectoryFeedback(genpy.Message):
  _md5sum = "ced1f6e4a7e2d4e812288f7a9f1b6e62"
  _type = "acg_control_msg/FollowWorkspaceTrajectoryFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/Pose desired_pose
geometry_msgs/Wrench desired_wrench
geometry_msgs/Pose actual_pose
geometry_msgs/Wrench actual_wrench
geometry_msgs/Pose error_pose
geometry_msgs/Wrench error_wrench
std_msgs/Duration time_from_start

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/Duration
duration data
"""
  __slots__ = ['desired_pose','desired_wrench','actual_pose','actual_wrench','error_pose','error_wrench','time_from_start']
  _slot_types = ['geometry_msgs/Pose','geometry_msgs/Wrench','geometry_msgs/Pose','geometry_msgs/Wrench','geometry_msgs/Pose','geometry_msgs/Wrench','std_msgs/Duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       desired_pose,desired_wrench,actual_pose,actual_wrench,error_pose,error_wrench,time_from_start

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FollowWorkspaceTrajectoryFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.desired_pose is None:
        self.desired_pose = geometry_msgs.msg.Pose()
      if self.desired_wrench is None:
        self.desired_wrench = geometry_msgs.msg.Wrench()
      if self.actual_pose is None:
        self.actual_pose = geometry_msgs.msg.Pose()
      if self.actual_wrench is None:
        self.actual_wrench = geometry_msgs.msg.Wrench()
      if self.error_pose is None:
        self.error_pose = geometry_msgs.msg.Pose()
      if self.error_wrench is None:
        self.error_wrench = geometry_msgs.msg.Wrench()
      if self.time_from_start is None:
        self.time_from_start = std_msgs.msg.Duration()
    else:
      self.desired_pose = geometry_msgs.msg.Pose()
      self.desired_wrench = geometry_msgs.msg.Wrench()
      self.actual_pose = geometry_msgs.msg.Pose()
      self.actual_wrench = geometry_msgs.msg.Wrench()
      self.error_pose = geometry_msgs.msg.Pose()
      self.error_wrench = geometry_msgs.msg.Wrench()
      self.time_from_start = std_msgs.msg.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_39d2i().pack(_x.desired_pose.position.x, _x.desired_pose.position.y, _x.desired_pose.position.z, _x.desired_pose.orientation.x, _x.desired_pose.orientation.y, _x.desired_pose.orientation.z, _x.desired_pose.orientation.w, _x.desired_wrench.force.x, _x.desired_wrench.force.y, _x.desired_wrench.force.z, _x.desired_wrench.torque.x, _x.desired_wrench.torque.y, _x.desired_wrench.torque.z, _x.actual_pose.position.x, _x.actual_pose.position.y, _x.actual_pose.position.z, _x.actual_pose.orientation.x, _x.actual_pose.orientation.y, _x.actual_pose.orientation.z, _x.actual_pose.orientation.w, _x.actual_wrench.force.x, _x.actual_wrench.force.y, _x.actual_wrench.force.z, _x.actual_wrench.torque.x, _x.actual_wrench.torque.y, _x.actual_wrench.torque.z, _x.error_pose.position.x, _x.error_pose.position.y, _x.error_pose.position.z, _x.error_pose.orientation.x, _x.error_pose.orientation.y, _x.error_pose.orientation.z, _x.error_pose.orientation.w, _x.error_wrench.force.x, _x.error_wrench.force.y, _x.error_wrench.force.z, _x.error_wrench.torque.x, _x.error_wrench.torque.y, _x.error_wrench.torque.z, _x.time_from_start.data.secs, _x.time_from_start.data.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.desired_pose is None:
        self.desired_pose = geometry_msgs.msg.Pose()
      if self.desired_wrench is None:
        self.desired_wrench = geometry_msgs.msg.Wrench()
      if self.actual_pose is None:
        self.actual_pose = geometry_msgs.msg.Pose()
      if self.actual_wrench is None:
        self.actual_wrench = geometry_msgs.msg.Wrench()
      if self.error_pose is None:
        self.error_pose = geometry_msgs.msg.Pose()
      if self.error_wrench is None:
        self.error_wrench = geometry_msgs.msg.Wrench()
      if self.time_from_start is None:
        self.time_from_start = std_msgs.msg.Duration()
      end = 0
      _x = self
      start = end
      end += 320
      (_x.desired_pose.position.x, _x.desired_pose.position.y, _x.desired_pose.position.z, _x.desired_pose.orientation.x, _x.desired_pose.orientation.y, _x.desired_pose.orientation.z, _x.desired_pose.orientation.w, _x.desired_wrench.force.x, _x.desired_wrench.force.y, _x.desired_wrench.force.z, _x.desired_wrench.torque.x, _x.desired_wrench.torque.y, _x.desired_wrench.torque.z, _x.actual_pose.position.x, _x.actual_pose.position.y, _x.actual_pose.position.z, _x.actual_pose.orientation.x, _x.actual_pose.orientation.y, _x.actual_pose.orientation.z, _x.actual_pose.orientation.w, _x.actual_wrench.force.x, _x.actual_wrench.force.y, _x.actual_wrench.force.z, _x.actual_wrench.torque.x, _x.actual_wrench.torque.y, _x.actual_wrench.torque.z, _x.error_pose.position.x, _x.error_pose.position.y, _x.error_pose.position.z, _x.error_pose.orientation.x, _x.error_pose.orientation.y, _x.error_pose.orientation.z, _x.error_pose.orientation.w, _x.error_wrench.force.x, _x.error_wrench.force.y, _x.error_wrench.force.z, _x.error_wrench.torque.x, _x.error_wrench.torque.y, _x.error_wrench.torque.z, _x.time_from_start.data.secs, _x.time_from_start.data.nsecs,) = _get_struct_39d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_39d2i().pack(_x.desired_pose.position.x, _x.desired_pose.position.y, _x.desired_pose.position.z, _x.desired_pose.orientation.x, _x.desired_pose.orientation.y, _x.desired_pose.orientation.z, _x.desired_pose.orientation.w, _x.desired_wrench.force.x, _x.desired_wrench.force.y, _x.desired_wrench.force.z, _x.desired_wrench.torque.x, _x.desired_wrench.torque.y, _x.desired_wrench.torque.z, _x.actual_pose.position.x, _x.actual_pose.position.y, _x.actual_pose.position.z, _x.actual_pose.orientation.x, _x.actual_pose.orientation.y, _x.actual_pose.orientation.z, _x.actual_pose.orientation.w, _x.actual_wrench.force.x, _x.actual_wrench.force.y, _x.actual_wrench.force.z, _x.actual_wrench.torque.x, _x.actual_wrench.torque.y, _x.actual_wrench.torque.z, _x.error_pose.position.x, _x.error_pose.position.y, _x.error_pose.position.z, _x.error_pose.orientation.x, _x.error_pose.orientation.y, _x.error_pose.orientation.z, _x.error_pose.orientation.w, _x.error_wrench.force.x, _x.error_wrench.force.y, _x.error_wrench.force.z, _x.error_wrench.torque.x, _x.error_wrench.torque.y, _x.error_wrench.torque.z, _x.time_from_start.data.secs, _x.time_from_start.data.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.desired_pose is None:
        self.desired_pose = geometry_msgs.msg.Pose()
      if self.desired_wrench is None:
        self.desired_wrench = geometry_msgs.msg.Wrench()
      if self.actual_pose is None:
        self.actual_pose = geometry_msgs.msg.Pose()
      if self.actual_wrench is None:
        self.actual_wrench = geometry_msgs.msg.Wrench()
      if self.error_pose is None:
        self.error_pose = geometry_msgs.msg.Pose()
      if self.error_wrench is None:
        self.error_wrench = geometry_msgs.msg.Wrench()
      if self.time_from_start is None:
        self.time_from_start = std_msgs.msg.Duration()
      end = 0
      _x = self
      start = end
      end += 320
      (_x.desired_pose.position.x, _x.desired_pose.position.y, _x.desired_pose.position.z, _x.desired_pose.orientation.x, _x.desired_pose.orientation.y, _x.desired_pose.orientation.z, _x.desired_pose.orientation.w, _x.desired_wrench.force.x, _x.desired_wrench.force.y, _x.desired_wrench.force.z, _x.desired_wrench.torque.x, _x.desired_wrench.torque.y, _x.desired_wrench.torque.z, _x.actual_pose.position.x, _x.actual_pose.position.y, _x.actual_pose.position.z, _x.actual_pose.orientation.x, _x.actual_pose.orientation.y, _x.actual_pose.orientation.z, _x.actual_pose.orientation.w, _x.actual_wrench.force.x, _x.actual_wrench.force.y, _x.actual_wrench.force.z, _x.actual_wrench.torque.x, _x.actual_wrench.torque.y, _x.actual_wrench.torque.z, _x.error_pose.position.x, _x.error_pose.position.y, _x.error_pose.position.z, _x.error_pose.orientation.x, _x.error_pose.orientation.y, _x.error_pose.orientation.z, _x.error_pose.orientation.w, _x.error_wrench.force.x, _x.error_wrench.force.y, _x.error_wrench.force.z, _x.error_wrench.torque.x, _x.error_wrench.torque.y, _x.error_wrench.torque.z, _x.time_from_start.data.secs, _x.time_from_start.data.nsecs,) = _get_struct_39d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_39d2i = None
def _get_struct_39d2i():
    global _struct_39d2i
    if _struct_39d2i is None:
        _struct_39d2i = struct.Struct("<39d2i")
    return _struct_39d2i
