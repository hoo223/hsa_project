# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acg_control_msg/FollowWorkspaceTrajectoryAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import acg_control_msg.msg
import actionlib_msgs.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg
import workspace_trajectory_msgs.msg

class FollowWorkspaceTrajectoryAction(genpy.Message):
  _md5sum = "28943193602e285b1572c5ce76aa6c00"
  _type = "acg_control_msg/FollowWorkspaceTrajectoryAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

FollowWorkspaceTrajectoryActionGoal action_goal
FollowWorkspaceTrajectoryActionResult action_result
FollowWorkspaceTrajectoryActionFeedback action_feedback

================================================================================
MSG: acg_control_msg/FollowWorkspaceTrajectoryActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
FollowWorkspaceTrajectoryGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: acg_control_msg/FollowWorkspaceTrajectoryGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
workspace_trajectory_msgs/WorkspaceTrajectory workspace_trajectory

================================================================================
MSG: workspace_trajectory_msgs/WorkspaceTrajectory
string name
geometry_msgs/Pose[] waypoints
geometry_msgs/Wrench[] wrenches
float64[] timestamps

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: acg_control_msg/FollowWorkspaceTrajectoryActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
FollowWorkspaceTrajectoryResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: acg_control_msg/FollowWorkspaceTrajectoryResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
bool success

================================================================================
MSG: acg_control_msg/FollowWorkspaceTrajectoryActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
FollowWorkspaceTrajectoryFeedback feedback

================================================================================
MSG: acg_control_msg/FollowWorkspaceTrajectoryFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/Pose desired_pose
geometry_msgs/Wrench desired_wrench
geometry_msgs/Pose actual_pose
geometry_msgs/Wrench actual_wrench
geometry_msgs/Pose error_pose
geometry_msgs/Wrench error_wrench
std_msgs/Duration time_from_start

================================================================================
MSG: std_msgs/Duration
duration data
"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['acg_control_msg/FollowWorkspaceTrajectoryActionGoal','acg_control_msg/FollowWorkspaceTrajectoryActionResult','acg_control_msg/FollowWorkspaceTrajectoryActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FollowWorkspaceTrajectoryAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = acg_control_msg.msg.FollowWorkspaceTrajectoryActionGoal()
      if self.action_result is None:
        self.action_result = acg_control_msg.msg.FollowWorkspaceTrajectoryActionResult()
      if self.action_feedback is None:
        self.action_feedback = acg_control_msg.msg.FollowWorkspaceTrajectoryActionFeedback()
    else:
      self.action_goal = acg_control_msg.msg.FollowWorkspaceTrajectoryActionGoal()
      self.action_result = acg_control_msg.msg.FollowWorkspaceTrajectoryActionResult()
      self.action_feedback = acg_control_msg.msg.FollowWorkspaceTrajectoryActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.workspace_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.workspace_trajectory.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.workspace_trajectory.waypoints:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.workspace_trajectory.wrenches)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.workspace_trajectory.wrenches:
        _v3 = val1.force
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.torque
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.workspace_trajectory.timestamps)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.workspace_trajectory.timestamps))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_39d2i().pack(_x.action_feedback.feedback.desired_pose.position.x, _x.action_feedback.feedback.desired_pose.position.y, _x.action_feedback.feedback.desired_pose.position.z, _x.action_feedback.feedback.desired_pose.orientation.x, _x.action_feedback.feedback.desired_pose.orientation.y, _x.action_feedback.feedback.desired_pose.orientation.z, _x.action_feedback.feedback.desired_pose.orientation.w, _x.action_feedback.feedback.desired_wrench.force.x, _x.action_feedback.feedback.desired_wrench.force.y, _x.action_feedback.feedback.desired_wrench.force.z, _x.action_feedback.feedback.desired_wrench.torque.x, _x.action_feedback.feedback.desired_wrench.torque.y, _x.action_feedback.feedback.desired_wrench.torque.z, _x.action_feedback.feedback.actual_pose.position.x, _x.action_feedback.feedback.actual_pose.position.y, _x.action_feedback.feedback.actual_pose.position.z, _x.action_feedback.feedback.actual_pose.orientation.x, _x.action_feedback.feedback.actual_pose.orientation.y, _x.action_feedback.feedback.actual_pose.orientation.z, _x.action_feedback.feedback.actual_pose.orientation.w, _x.action_feedback.feedback.actual_wrench.force.x, _x.action_feedback.feedback.actual_wrench.force.y, _x.action_feedback.feedback.actual_wrench.force.z, _x.action_feedback.feedback.actual_wrench.torque.x, _x.action_feedback.feedback.actual_wrench.torque.y, _x.action_feedback.feedback.actual_wrench.torque.z, _x.action_feedback.feedback.error_pose.position.x, _x.action_feedback.feedback.error_pose.position.y, _x.action_feedback.feedback.error_pose.position.z, _x.action_feedback.feedback.error_pose.orientation.x, _x.action_feedback.feedback.error_pose.orientation.y, _x.action_feedback.feedback.error_pose.orientation.z, _x.action_feedback.feedback.error_pose.orientation.w, _x.action_feedback.feedback.error_wrench.force.x, _x.action_feedback.feedback.error_wrench.force.y, _x.action_feedback.feedback.error_wrench.force.z, _x.action_feedback.feedback.error_wrench.torque.x, _x.action_feedback.feedback.error_wrench.torque.y, _x.action_feedback.feedback.error_wrench.torque.z, _x.action_feedback.feedback.time_from_start.data.secs, _x.action_feedback.feedback.time_from_start.data.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = acg_control_msg.msg.FollowWorkspaceTrajectoryActionGoal()
      if self.action_result is None:
        self.action_result = acg_control_msg.msg.FollowWorkspaceTrajectoryActionResult()
      if self.action_feedback is None:
        self.action_feedback = acg_control_msg.msg.FollowWorkspaceTrajectoryActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.workspace_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.workspace_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.workspace_trajectory.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v5 = val1.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.workspace_trajectory.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.workspace_trajectory.wrenches = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v7 = val1.force
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.torque
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.workspace_trajectory.wrenches.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.workspace_trajectory.timestamps = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 320
      (_x.action_feedback.feedback.desired_pose.position.x, _x.action_feedback.feedback.desired_pose.position.y, _x.action_feedback.feedback.desired_pose.position.z, _x.action_feedback.feedback.desired_pose.orientation.x, _x.action_feedback.feedback.desired_pose.orientation.y, _x.action_feedback.feedback.desired_pose.orientation.z, _x.action_feedback.feedback.desired_pose.orientation.w, _x.action_feedback.feedback.desired_wrench.force.x, _x.action_feedback.feedback.desired_wrench.force.y, _x.action_feedback.feedback.desired_wrench.force.z, _x.action_feedback.feedback.desired_wrench.torque.x, _x.action_feedback.feedback.desired_wrench.torque.y, _x.action_feedback.feedback.desired_wrench.torque.z, _x.action_feedback.feedback.actual_pose.position.x, _x.action_feedback.feedback.actual_pose.position.y, _x.action_feedback.feedback.actual_pose.position.z, _x.action_feedback.feedback.actual_pose.orientation.x, _x.action_feedback.feedback.actual_pose.orientation.y, _x.action_feedback.feedback.actual_pose.orientation.z, _x.action_feedback.feedback.actual_pose.orientation.w, _x.action_feedback.feedback.actual_wrench.force.x, _x.action_feedback.feedback.actual_wrench.force.y, _x.action_feedback.feedback.actual_wrench.force.z, _x.action_feedback.feedback.actual_wrench.torque.x, _x.action_feedback.feedback.actual_wrench.torque.y, _x.action_feedback.feedback.actual_wrench.torque.z, _x.action_feedback.feedback.error_pose.position.x, _x.action_feedback.feedback.error_pose.position.y, _x.action_feedback.feedback.error_pose.position.z, _x.action_feedback.feedback.error_pose.orientation.x, _x.action_feedback.feedback.error_pose.orientation.y, _x.action_feedback.feedback.error_pose.orientation.z, _x.action_feedback.feedback.error_pose.orientation.w, _x.action_feedback.feedback.error_wrench.force.x, _x.action_feedback.feedback.error_wrench.force.y, _x.action_feedback.feedback.error_wrench.force.z, _x.action_feedback.feedback.error_wrench.torque.x, _x.action_feedback.feedback.error_wrench.torque.y, _x.action_feedback.feedback.error_wrench.torque.z, _x.action_feedback.feedback.time_from_start.data.secs, _x.action_feedback.feedback.time_from_start.data.nsecs,) = _get_struct_39d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.workspace_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.workspace_trajectory.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.workspace_trajectory.waypoints:
        _v9 = val1.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.workspace_trajectory.wrenches)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.workspace_trajectory.wrenches:
        _v11 = val1.force
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.torque
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.workspace_trajectory.timestamps)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.workspace_trajectory.timestamps.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_39d2i().pack(_x.action_feedback.feedback.desired_pose.position.x, _x.action_feedback.feedback.desired_pose.position.y, _x.action_feedback.feedback.desired_pose.position.z, _x.action_feedback.feedback.desired_pose.orientation.x, _x.action_feedback.feedback.desired_pose.orientation.y, _x.action_feedback.feedback.desired_pose.orientation.z, _x.action_feedback.feedback.desired_pose.orientation.w, _x.action_feedback.feedback.desired_wrench.force.x, _x.action_feedback.feedback.desired_wrench.force.y, _x.action_feedback.feedback.desired_wrench.force.z, _x.action_feedback.feedback.desired_wrench.torque.x, _x.action_feedback.feedback.desired_wrench.torque.y, _x.action_feedback.feedback.desired_wrench.torque.z, _x.action_feedback.feedback.actual_pose.position.x, _x.action_feedback.feedback.actual_pose.position.y, _x.action_feedback.feedback.actual_pose.position.z, _x.action_feedback.feedback.actual_pose.orientation.x, _x.action_feedback.feedback.actual_pose.orientation.y, _x.action_feedback.feedback.actual_pose.orientation.z, _x.action_feedback.feedback.actual_pose.orientation.w, _x.action_feedback.feedback.actual_wrench.force.x, _x.action_feedback.feedback.actual_wrench.force.y, _x.action_feedback.feedback.actual_wrench.force.z, _x.action_feedback.feedback.actual_wrench.torque.x, _x.action_feedback.feedback.actual_wrench.torque.y, _x.action_feedback.feedback.actual_wrench.torque.z, _x.action_feedback.feedback.error_pose.position.x, _x.action_feedback.feedback.error_pose.position.y, _x.action_feedback.feedback.error_pose.position.z, _x.action_feedback.feedback.error_pose.orientation.x, _x.action_feedback.feedback.error_pose.orientation.y, _x.action_feedback.feedback.error_pose.orientation.z, _x.action_feedback.feedback.error_pose.orientation.w, _x.action_feedback.feedback.error_wrench.force.x, _x.action_feedback.feedback.error_wrench.force.y, _x.action_feedback.feedback.error_wrench.force.z, _x.action_feedback.feedback.error_wrench.torque.x, _x.action_feedback.feedback.error_wrench.torque.y, _x.action_feedback.feedback.error_wrench.torque.z, _x.action_feedback.feedback.time_from_start.data.secs, _x.action_feedback.feedback.time_from_start.data.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = acg_control_msg.msg.FollowWorkspaceTrajectoryActionGoal()
      if self.action_result is None:
        self.action_result = acg_control_msg.msg.FollowWorkspaceTrajectoryActionResult()
      if self.action_feedback is None:
        self.action_feedback = acg_control_msg.msg.FollowWorkspaceTrajectoryActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.workspace_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.workspace_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.workspace_trajectory.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v13 = val1.position
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.orientation
        _x = _v14
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.workspace_trajectory.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.workspace_trajectory.wrenches = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v15 = val1.force
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.torque
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.workspace_trajectory.wrenches.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.workspace_trajectory.timestamps = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 320
      (_x.action_feedback.feedback.desired_pose.position.x, _x.action_feedback.feedback.desired_pose.position.y, _x.action_feedback.feedback.desired_pose.position.z, _x.action_feedback.feedback.desired_pose.orientation.x, _x.action_feedback.feedback.desired_pose.orientation.y, _x.action_feedback.feedback.desired_pose.orientation.z, _x.action_feedback.feedback.desired_pose.orientation.w, _x.action_feedback.feedback.desired_wrench.force.x, _x.action_feedback.feedback.desired_wrench.force.y, _x.action_feedback.feedback.desired_wrench.force.z, _x.action_feedback.feedback.desired_wrench.torque.x, _x.action_feedback.feedback.desired_wrench.torque.y, _x.action_feedback.feedback.desired_wrench.torque.z, _x.action_feedback.feedback.actual_pose.position.x, _x.action_feedback.feedback.actual_pose.position.y, _x.action_feedback.feedback.actual_pose.position.z, _x.action_feedback.feedback.actual_pose.orientation.x, _x.action_feedback.feedback.actual_pose.orientation.y, _x.action_feedback.feedback.actual_pose.orientation.z, _x.action_feedback.feedback.actual_pose.orientation.w, _x.action_feedback.feedback.actual_wrench.force.x, _x.action_feedback.feedback.actual_wrench.force.y, _x.action_feedback.feedback.actual_wrench.force.z, _x.action_feedback.feedback.actual_wrench.torque.x, _x.action_feedback.feedback.actual_wrench.torque.y, _x.action_feedback.feedback.actual_wrench.torque.z, _x.action_feedback.feedback.error_pose.position.x, _x.action_feedback.feedback.error_pose.position.y, _x.action_feedback.feedback.error_pose.position.z, _x.action_feedback.feedback.error_pose.orientation.x, _x.action_feedback.feedback.error_pose.orientation.y, _x.action_feedback.feedback.error_pose.orientation.z, _x.action_feedback.feedback.error_pose.orientation.w, _x.action_feedback.feedback.error_wrench.force.x, _x.action_feedback.feedback.error_wrench.force.y, _x.action_feedback.feedback.error_wrench.force.z, _x.action_feedback.feedback.error_wrench.torque.x, _x.action_feedback.feedback.error_wrench.torque.y, _x.action_feedback.feedback.error_wrench.torque.z, _x.action_feedback.feedback.time_from_start.data.secs, _x.action_feedback.feedback.time_from_start.data.nsecs,) = _get_struct_39d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_39d2i = None
def _get_struct_39d2i():
    global _struct_39d2i
    if _struct_39d2i is None:
        _struct_39d2i = struct.Struct("<39d2i")
    return _struct_39d2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
