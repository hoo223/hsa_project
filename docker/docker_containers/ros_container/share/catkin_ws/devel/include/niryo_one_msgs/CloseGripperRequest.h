// Generated by gencpp from file niryo_one_msgs/CloseGripperRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ONE_MSGS_MESSAGE_CLOSEGRIPPERREQUEST_H
#define NIRYO_ONE_MSGS_MESSAGE_CLOSEGRIPPERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_one_msgs
{
template <class ContainerAllocator>
struct CloseGripperRequest_
{
  typedef CloseGripperRequest_<ContainerAllocator> Type;

  CloseGripperRequest_()
    : id(0)
    , close_position(0)
    , close_speed(0)
    , close_hold_torque(0)
    , close_max_torque(0)  {
    }
  CloseGripperRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , close_position(0)
    , close_speed(0)
    , close_hold_torque(0)
    , close_max_torque(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef int16_t _close_position_type;
  _close_position_type close_position;

   typedef int16_t _close_speed_type;
  _close_speed_type close_speed;

   typedef int16_t _close_hold_torque_type;
  _close_hold_torque_type close_hold_torque;

   typedef int16_t _close_max_torque_type;
  _close_max_torque_type close_max_torque;





  typedef boost::shared_ptr< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CloseGripperRequest_

typedef ::niryo_one_msgs::CloseGripperRequest_<std::allocator<void> > CloseGripperRequest;

typedef boost::shared_ptr< ::niryo_one_msgs::CloseGripperRequest > CloseGripperRequestPtr;
typedef boost::shared_ptr< ::niryo_one_msgs::CloseGripperRequest const> CloseGripperRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.close_position == rhs.close_position &&
    lhs.close_speed == rhs.close_speed &&
    lhs.close_hold_torque == rhs.close_hold_torque &&
    lhs.close_max_torque == rhs.close_max_torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_one_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44ae3b67a5ebbc045039caba07d974fa";
  }

  static const char* value(const ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44ae3b67a5ebbc04ULL;
  static const uint64_t static_value2 = 0x5039caba07d974faULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_one_msgs/CloseGripperRequest";
  }

  static const char* value(const ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint8 id\n"
"\n"
"int16 close_position\n"
"int16 close_speed\n"
"int16 close_hold_torque\n"
"int16 close_max_torque\n"
;
  }

  static const char* value(const ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.close_position);
      stream.next(m.close_speed);
      stream.next(m.close_hold_torque);
      stream.next(m.close_max_torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CloseGripperRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_one_msgs::CloseGripperRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "close_position: ";
    Printer<int16_t>::stream(s, indent + "  ", v.close_position);
    s << indent << "close_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.close_speed);
    s << indent << "close_hold_torque: ";
    Printer<int16_t>::stream(s, indent + "  ", v.close_hold_torque);
    s << indent << "close_max_torque: ";
    Printer<int16_t>::stream(s, indent + "  ", v.close_max_torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ONE_MSGS_MESSAGE_CLOSEGRIPPERREQUEST_H
