// Generated by gencpp from file niryo_one_msgs/DebugMarkersResponse.msg
// DO NOT EDIT!


#ifndef NIRYO_ONE_MSGS_MESSAGE_DEBUGMARKERSRESPONSE_H
#define NIRYO_ONE_MSGS_MESSAGE_DEBUGMARKERSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/CompressedImage.h>

namespace niryo_one_msgs
{
template <class ContainerAllocator>
struct DebugMarkersResponse_
{
  typedef DebugMarkersResponse_<ContainerAllocator> Type;

  DebugMarkersResponse_()
    : markers_detected(false)
    , img()  {
    }
  DebugMarkersResponse_(const ContainerAllocator& _alloc)
    : markers_detected(false)
    , img(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _markers_detected_type;
  _markers_detected_type markers_detected;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _img_type;
  _img_type img;





  typedef boost::shared_ptr< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DebugMarkersResponse_

typedef ::niryo_one_msgs::DebugMarkersResponse_<std::allocator<void> > DebugMarkersResponse;

typedef boost::shared_ptr< ::niryo_one_msgs::DebugMarkersResponse > DebugMarkersResponsePtr;
typedef boost::shared_ptr< ::niryo_one_msgs::DebugMarkersResponse const> DebugMarkersResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator2> & rhs)
{
  return lhs.markers_detected == rhs.markers_detected &&
    lhs.img == rhs.img;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_one_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63758d5125879b809b9c2ee90cbc28ff";
  }

  static const char* value(const ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63758d5125879b80ULL;
  static const uint64_t static_value2 = 0x9b9c2ee90cbc28ffULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_one_msgs/DebugMarkersResponse";
  }

  static const char* value(const ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool markers_detected\n"
"sensor_msgs/CompressedImage img\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/CompressedImage\n"
"# This message contains a compressed image\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"\n"
"string format        # Specifies the format of the data\n"
"                     #   Acceptable values:\n"
"                     #     jpeg, png\n"
"uint8[] data         # Compressed image buffer\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.markers_detected);
      stream.next(m.img);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DebugMarkersResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_one_msgs::DebugMarkersResponse_<ContainerAllocator>& v)
  {
    s << indent << "markers_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.markers_detected);
    s << indent << "img: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.img);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ONE_MSGS_MESSAGE_DEBUGMARKERSRESPONSE_H
