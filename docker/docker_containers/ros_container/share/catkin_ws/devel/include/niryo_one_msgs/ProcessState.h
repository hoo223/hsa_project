// Generated by gencpp from file niryo_one_msgs/ProcessState.msg
// DO NOT EDIT!


#ifndef NIRYO_ONE_MSGS_MESSAGE_PROCESSSTATE_H
#define NIRYO_ONE_MSGS_MESSAGE_PROCESSSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_one_msgs
{
template <class ContainerAllocator>
struct ProcessState_
{
  typedef ProcessState_<ContainerAllocator> Type;

  ProcessState_()
    : name()
    , is_active()  {
    }
  ProcessState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , is_active(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _is_active_type;
  _is_active_type is_active;





  typedef boost::shared_ptr< ::niryo_one_msgs::ProcessState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_one_msgs::ProcessState_<ContainerAllocator> const> ConstPtr;

}; // struct ProcessState_

typedef ::niryo_one_msgs::ProcessState_<std::allocator<void> > ProcessState;

typedef boost::shared_ptr< ::niryo_one_msgs::ProcessState > ProcessStatePtr;
typedef boost::shared_ptr< ::niryo_one_msgs::ProcessState const> ProcessStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_one_msgs::ProcessState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_one_msgs::ProcessState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_one_msgs::ProcessState_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::ProcessState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.is_active == rhs.is_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_one_msgs::ProcessState_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::ProcessState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_one_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::ProcessState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::ProcessState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::ProcessState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::ProcessState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::ProcessState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::ProcessState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_one_msgs::ProcessState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea4d2ab332d89d84ef08a4d6fe541702";
  }

  static const char* value(const ::niryo_one_msgs::ProcessState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea4d2ab332d89d84ULL;
  static const uint64_t static_value2 = 0xef08a4d6fe541702ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_one_msgs::ProcessState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_one_msgs/ProcessState";
  }

  static const char* value(const ::niryo_one_msgs::ProcessState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_one_msgs::ProcessState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string[] name\n"
"bool[] is_active\n"
"\n"
;
  }

  static const char* value(const ::niryo_one_msgs::ProcessState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_one_msgs::ProcessState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.is_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcessState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_one_msgs::ProcessState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_one_msgs::ProcessState_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "is_active[]" << std::endl;
    for (size_t i = 0; i < v.is_active.size(); ++i)
    {
      s << indent << "  is_active[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.is_active[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ONE_MSGS_MESSAGE_PROCESSSTATE_H
