// Generated by gencpp from file niryo_one_msgs/ObjDetectionResponse.msg
// DO NOT EDIT!


#ifndef NIRYO_ONE_MSGS_MESSAGE_OBJDETECTIONRESPONSE_H
#define NIRYO_ONE_MSGS_MESSAGE_OBJDETECTIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_one_msgs/ObjectPose.h>
#include <sensor_msgs/CompressedImage.h>

namespace niryo_one_msgs
{
template <class ContainerAllocator>
struct ObjDetectionResponse_
{
  typedef ObjDetectionResponse_<ContainerAllocator> Type;

  ObjDetectionResponse_()
    : status(0)
    , obj_pose()
    , obj_type()
    , obj_color()
    , img()  {
    }
  ObjDetectionResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , obj_pose(_alloc)
    , obj_type(_alloc)
    , obj_color(_alloc)
    , img(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _status_type;
  _status_type status;

   typedef  ::niryo_one_msgs::ObjectPose_<ContainerAllocator>  _obj_pose_type;
  _obj_pose_type obj_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obj_type_type;
  _obj_type_type obj_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obj_color_type;
  _obj_color_type obj_color;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _img_type;
  _img_type img;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESSFUL)
  #undef SUCCESSFUL
#endif
#if defined(_WIN32) && defined(VIDEO_STREAM_NOT_RUNNING)
  #undef VIDEO_STREAM_NOT_RUNNING
#endif
#if defined(_WIN32) && defined(OBJECT_NOT_FOUND)
  #undef OBJECT_NOT_FOUND
#endif
#if defined(_WIN32) && defined(MARKERS_NOT_FOUND)
  #undef MARKERS_NOT_FOUND
#endif

  enum {
    SUCCESSFUL = 1,
    VIDEO_STREAM_NOT_RUNNING = -1,
    OBJECT_NOT_FOUND = -2,
    MARKERS_NOT_FOUND = -3,
  };


  typedef boost::shared_ptr< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ObjDetectionResponse_

typedef ::niryo_one_msgs::ObjDetectionResponse_<std::allocator<void> > ObjDetectionResponse;

typedef boost::shared_ptr< ::niryo_one_msgs::ObjDetectionResponse > ObjDetectionResponsePtr;
typedef boost::shared_ptr< ::niryo_one_msgs::ObjDetectionResponse const> ObjDetectionResponseConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.obj_pose == rhs.obj_pose &&
    lhs.obj_type == rhs.obj_type &&
    lhs.obj_color == rhs.obj_color &&
    lhs.img == rhs.img;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_one_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b91b10d20d54e39c0903545ec757c896";
  }

  static const char* value(const ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb91b10d20d54e39cULL;
  static const uint64_t static_value2 = 0x0903545ec757c896ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_one_msgs/ObjDetectionResponse";
  }

  static const char* value(const ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 status\n"
"int32 SUCCESSFUL = 1\n"
"int32 VIDEO_STREAM_NOT_RUNNING = -1\n"
"int32 OBJECT_NOT_FOUND = -2\n"
"int32 MARKERS_NOT_FOUND = -3\n"
"\n"
"niryo_one_msgs/ObjectPose obj_pose\n"
"\n"
"string obj_type\n"
"string obj_color\n"
"\n"
"sensor_msgs/CompressedImage img\n"
"\n"
"\n"
"================================================================================\n"
"MSG: niryo_one_msgs/ObjectPose\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/CompressedImage\n"
"# This message contains a compressed image\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"\n"
"string format        # Specifies the format of the data\n"
"                     #   Acceptable values:\n"
"                     #     jpeg, png\n"
"uint8[] data         # Compressed image buffer\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.obj_pose);
      stream.next(m.obj_type);
      stream.next(m.obj_color);
      stream.next(m.img);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjDetectionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_one_msgs::ObjDetectionResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "obj_pose: ";
    s << std::endl;
    Printer< ::niryo_one_msgs::ObjectPose_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_pose);
    s << indent << "obj_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obj_type);
    s << indent << "obj_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obj_color);
    s << indent << "img: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.img);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ONE_MSGS_MESSAGE_OBJDETECTIONRESPONSE_H
