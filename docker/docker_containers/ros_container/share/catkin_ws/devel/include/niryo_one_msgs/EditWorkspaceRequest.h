// Generated by gencpp from file niryo_one_msgs/EditWorkspaceRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ONE_MSGS_MESSAGE_EDITWORKSPACEREQUEST_H
#define NIRYO_ONE_MSGS_MESSAGE_EDITWORKSPACEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_one_msgs/RobotState.h>
#include <niryo_one_msgs/RobotState.h>
#include <niryo_one_msgs/RobotState.h>
#include <niryo_one_msgs/RobotState.h>

namespace niryo_one_msgs
{
template <class ContainerAllocator>
struct EditWorkspaceRequest_
{
  typedef EditWorkspaceRequest_<ContainerAllocator> Type;

  EditWorkspaceRequest_()
    : cmd(0)
    , name()
    , pose_origin()
    , pose_1()
    , pose_2()
    , pose_3()  {
    }
  EditWorkspaceRequest_(const ContainerAllocator& _alloc)
    : cmd(0)
    , name(_alloc)
    , pose_origin(_alloc)
    , pose_1(_alloc)
    , pose_2(_alloc)
    , pose_3(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _cmd_type;
  _cmd_type cmd;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::niryo_one_msgs::RobotState_<ContainerAllocator>  _pose_origin_type;
  _pose_origin_type pose_origin;

   typedef  ::niryo_one_msgs::RobotState_<ContainerAllocator>  _pose_1_type;
  _pose_1_type pose_1;

   typedef  ::niryo_one_msgs::RobotState_<ContainerAllocator>  _pose_2_type;
  _pose_2_type pose_2;

   typedef  ::niryo_one_msgs::RobotState_<ContainerAllocator>  _pose_3_type;
  _pose_3_type pose_3;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CREATE)
  #undef CREATE
#endif
#if defined(_WIN32) && defined(REMOVE)
  #undef REMOVE
#endif

  enum {
    CREATE = 1,
    REMOVE = -1,
  };


  typedef boost::shared_ptr< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EditWorkspaceRequest_

typedef ::niryo_one_msgs::EditWorkspaceRequest_<std::allocator<void> > EditWorkspaceRequest;

typedef boost::shared_ptr< ::niryo_one_msgs::EditWorkspaceRequest > EditWorkspaceRequestPtr;
typedef boost::shared_ptr< ::niryo_one_msgs::EditWorkspaceRequest const> EditWorkspaceRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.name == rhs.name &&
    lhs.pose_origin == rhs.pose_origin &&
    lhs.pose_1 == rhs.pose_1 &&
    lhs.pose_2 == rhs.pose_2 &&
    lhs.pose_3 == rhs.pose_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_one_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba9b3580344c5b5274fc4771afa1010d";
  }

  static const char* value(const ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba9b3580344c5b52ULL;
  static const uint64_t static_value2 = 0x74fc4771afa1010dULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_one_msgs/EditWorkspaceRequest";
  }

  static const char* value(const ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 CREATE = 1\n"
"int32 REMOVE = -1\n"
"\n"
"int32 cmd\n"
"string name\n"
"niryo_one_msgs/RobotState pose_origin\n"
"niryo_one_msgs/RobotState pose_1\n"
"niryo_one_msgs/RobotState pose_2\n"
"niryo_one_msgs/RobotState pose_3\n"
"\n"
"================================================================================\n"
"MSG: niryo_one_msgs/RobotState\n"
"\n"
"geometry_msgs/Point position\n"
"niryo_one_msgs/RPY rpy\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: niryo_one_msgs/RPY\n"
"# roll, pitch and yaw\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
;
  }

  static const char* value(const ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.name);
      stream.next(m.pose_origin);
      stream.next(m.pose_1);
      stream.next(m.pose_2);
      stream.next(m.pose_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EditWorkspaceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_one_msgs::EditWorkspaceRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "pose_origin: ";
    s << std::endl;
    Printer< ::niryo_one_msgs::RobotState_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_origin);
    s << indent << "pose_1: ";
    s << std::endl;
    Printer< ::niryo_one_msgs::RobotState_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_1);
    s << indent << "pose_2: ";
    s << std::endl;
    Printer< ::niryo_one_msgs::RobotState_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_2);
    s << indent << "pose_3: ";
    s << std::endl;
    Printer< ::niryo_one_msgs::RobotState_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ONE_MSGS_MESSAGE_EDITWORKSPACEREQUEST_H
