// Generated by gencpp from file niryo_one_msgs/ObjDetectionRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ONE_MSGS_MESSAGE_OBJDETECTIONREQUEST_H
#define NIRYO_ONE_MSGS_MESSAGE_OBJDETECTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_one_msgs
{
template <class ContainerAllocator>
struct ObjDetectionRequest_
{
  typedef ObjDetectionRequest_<ContainerAllocator> Type;

  ObjDetectionRequest_()
    : obj_type()
    , obj_color()
    , workspace_ratio(0.0)
    , ret_image(false)  {
    }
  ObjDetectionRequest_(const ContainerAllocator& _alloc)
    : obj_type(_alloc)
    , obj_color(_alloc)
    , workspace_ratio(0.0)
    , ret_image(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obj_type_type;
  _obj_type_type obj_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obj_color_type;
  _obj_color_type obj_color;

   typedef float _workspace_ratio_type;
  _workspace_ratio_type workspace_ratio;

   typedef uint8_t _ret_image_type;
  _ret_image_type ret_image;





  typedef boost::shared_ptr< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ObjDetectionRequest_

typedef ::niryo_one_msgs::ObjDetectionRequest_<std::allocator<void> > ObjDetectionRequest;

typedef boost::shared_ptr< ::niryo_one_msgs::ObjDetectionRequest > ObjDetectionRequestPtr;
typedef boost::shared_ptr< ::niryo_one_msgs::ObjDetectionRequest const> ObjDetectionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.obj_type == rhs.obj_type &&
    lhs.obj_color == rhs.obj_color &&
    lhs.workspace_ratio == rhs.workspace_ratio &&
    lhs.ret_image == rhs.ret_image;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator1> & lhs, const ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_one_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7af8c917a587a5527345a87ab0262fe5";
  }

  static const char* value(const ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7af8c917a587a552ULL;
  static const uint64_t static_value2 = 0x7345a87ab0262fe5ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_one_msgs/ObjDetectionRequest";
  }

  static const char* value(const ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string obj_type\n"
"string obj_color\n"
"float32 workspace_ratio\n"
"bool ret_image\n"
;
  }

  static const char* value(const ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_type);
      stream.next(m.obj_color);
      stream.next(m.workspace_ratio);
      stream.next(m.ret_image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjDetectionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_one_msgs::ObjDetectionRequest_<ContainerAllocator>& v)
  {
    s << indent << "obj_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obj_type);
    s << indent << "obj_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obj_color);
    s << indent << "workspace_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.workspace_ratio);
    s << indent << "ret_image: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ret_image);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ONE_MSGS_MESSAGE_OBJDETECTIONREQUEST_H
